setwd('/media/igna/Elements/HotelDieu/Cochrane')
library(gdata)
library(e1071)
#Upload IntraMap data
source("/home/igna/Desktop/Programs GBD/CUI_GBD/IntraMap_upload")
#Upload Manual JDZ data
source("/home/igna/Desktop/Programs GBD/CUI_GBD/Manual_JDZ_upload")
#Fonction test et creation MT
source("/home/igna/Desktop/Programs GBD/Classifier_Trial_GBD/2-Test_and_creation_of_MT")
#Upload Egbd, Mgbd + fonction Noeud_comm, recouv, scoring...
source("/home/igna/Desktop/Programs GBD/Fonctions/3-Fonctions_cui_gbd_sans_MT")
#Fonctions processing
source("/home/igna/Desktop/Programs GBD/Classifier_Trial_GBD/3-Processing")
#Fonction SVM
source("/home/igna/Desktop/Programs GBD/Classifier_Trial_GBD/4-SVM")
#Fonction Training
source("/home/igna/Desktop/Programs GBD/Classifier_Trial_GBD/5-Training")
#Fonction Classifier
source("/home/igna/Desktop/Programs GBD/Classifier_Trial_GBD/6-Classifier")
#Evaluation metrics
source("/home/igna/Desktop/Programs GBD/Fonctions/2bis-Evaluation_metrics_classifier")

data <- read.table("MetaMapBurden/Trial_Burden_Param/NCT_data_tot.txt")
MMap <- read.table("MetaMapBurden/Trial_Burden_Param/MMap_tot.txt")

#######################################################
alpha <- (0.2)/100

WS <- c("Yes","No","Duo")
ING <- c(TRUE,FALSE)
WC <- c("Yes","No")
gamma <- 0.1
cost <- 110

K <- 10
set.seed(7212)
x <- sample(1:nrow(data))
L <- split(x,ceiling(seq_along(x)/(length(x)/K)))

P_c <- c()
R_c <- c()
Sp_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

t0 <- proc.time()
for(i in 1:K){
#i <- sample(1:10,1)

trdt <- data[unlist(L[-i]),]
NCTstr <- tolower(as.character(trdt$PMID))
Mtr <- droplevels(MMap[MMap$NCT%in%paste("pbky",NCTstr,sep=""),])

tsdt <- data[unlist(L[i]),]
NCTsts <- tolower(as.character(tsdt$PMID))
Mts <- droplevels(MMap[MMap$NCT%in%paste("pbky",NCTsts,sep=""),])

for(wsd_svm in WS){
for(inc_nogbd_svm in ING){

TR <- training(trdt,Mtr,MT,Mtjd,alpha,wsd_svm,inc_nogbd_svm,gamma,cost)
MTc <- TR[[1]]
svm_mod <- TR[[2]]

for(wsd_classif in WC){

CL <- classifier(tsdt,Mts,MTc,svm_mod,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",tsdt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",tsdt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",tsdt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(tsdt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}
}
}
}
t1 <- proc.time()
#Pour 1 param svm: 45 minutes pour les 10 fold et tous les param classifier
#3.4min pour, avec 1 param svm, faire 1 fold validation, avec tous les param classifier
#3 min pour 5*10 param, 1 fold validation
#gamma <- (3:8)/20
#cost <- 2^(0:4)
#gamma <- (8:12)/100
#cost <- (17:25)*5

P_C <- matrix(P_c,ncol=12,byrow=TRUE)
Sp_C <- matrix(Sp_c,ncol=12,byrow=TRUE)
R_C <- matrix(R_c,ncol=12,byrow=TRUE)
P_T <- matrix(P_t,ncol=12,byrow=TRUE)
R_T <- matrix(R_t,ncol=12,byrow=TRUE)
SA_T <- matrix(SA_t,ncol=12,byrow=TRUE)

Valid <- data.frame( 	wsd_svm = rep(WS,each=4),
			svm_first = rep(rep(ING,each=length(WC)),length(WS)),
			wsd_clas = rep(WC,length(ING)*length(WS)),
			Prec_clas = apply(P_C,2,mean),
			Sp_clas = apply(Sp_C,2,mean),
			Rec_clas = apply(R_C,2,mean),
			Prec_tr = apply(P_T,2,mean),
			Rec_tr = apply(R_T,2,mean),
			SAcc_tr = apply(SA_T,2,mean))

Valid <- Valid[order(Valid$svm_first,Valid$wsd_svm,Valid$wsd_clas),]
Valid <- Valid[,c(2,1,3:ncol(Valid))]

write.csv(Valid,"MetaMapBurden/Trial_Burden_Param/Validation_table.csv")

##################################################################################
#Pas de SVM
###########
V <- read.csv("MetaMapBurden/Trial_Burden_Param/Validation_table.csv")
V <- V[,-1]
V$alpha <- 0.2/100

alpha <- 0.2/100
NCTs <- as.character(data$PMID)
A <- Test_ajout_MT(NCTs,MMap,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(data,MMap,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",data$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",data$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",data$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(data$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V2 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "All_trials",
			wsd_clas = WC,
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

####################################################################
#Only non-unclear trials

dt <- droplevels(data[data$GBDnp!="",])
MMapt <- droplevels(MMap[MMap$NCT%in%paste("pbky",tolower(dt$PMID),sep=""),])

NCTs <- as.character(dt$PMID)
A <- Test_ajout_MT(NCTs,MMapt,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",dt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",dt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",dt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(dt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V3 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "Only_Non_unclear",
			wsd_clas = WC,
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

####################################################
#Only non-unclear and mapped trials

R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

tst <- as.character(dt$GBDnp)[CL!=""]
CL <- CL[CL!=""]

algo <- strsplit(CL,"&")
tst <- strsplit(tst,"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V4 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "Only_Non_unclear_non_mapped",
			wsd_clas = WC,
			Prec_clas = NA,
			Sp_clas = NA,
			Rec_clas = NA,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

###################################################
#Only mapped trials

NCTs <- as.character(data$PMID)
A <- Test_ajout_MT(NCTs,MMap,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(data,MMap,MTc,wsd_classif)

tst <- as.character(data$GBDnp)[CL!=""]
CL <- CL[CL!=""]

P_c <- c(P_c,Prec_class(CL!="",tst!=""))
R_c <- c(R_c,Rec_class(CL!="",tst!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",tst!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(tst,"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V42 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "Only_mapped",
			wsd_clas = WC,
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)


#####################################################################
#Min alpha pour tout MMap

CUI <- unique(MMap$X5)
MTut <- droplevels(MT[MT$CUIinp%in%CUI,])
gbty <- unlist(tapply(MTut$GBD,MTut$CUIinp,function(x){length(unique(x[!is.na(x)]))}))
nogbd <- names(gbty[gbty==0])
fnogbd <- unlist(lapply(nogbd,function(x){sum(MMap$X5==x)}))
max(fnogbd[!nogbd%in%Mtjd$CUIinp])/nrow(MMap)
alpha = 0.8/1000

NCTs <- as.character(data$PMID)
A <- Test_ajout_MT(NCTs,MMap,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(data,MMap,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",data$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",data$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",data$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(data$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V5 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "All_trials",
			wsd_clas = WC,
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

#############################################################
#Only non-unclear trials
#Min alpha pour MMapt

dt <- droplevels(data[data$GBDnp!="",])
MMapt <- droplevels(MMap[MMap$NCT%in%paste("pbky",tolower(dt$PMID),sep=""),])

CUI <- unique(MMapt$X5)

MTut <- droplevels(MT[MT$CUIinp%in%CUI,])
gbty <- unlist(tapply(MTut$GBD,MTut$CUIinp,function(x){length(unique(x[!is.na(x)]))}))
nogbd <- names(gbty[gbty==0])
fnogbd <- unlist(lapply(nogbd,function(x){sum(MMapt$X5==x)}))
max(fnogbd[!nogbd%in%Mtjd$CUIinp])/nrow(MMapt)
alpha = 0.75/1000

NCTs <- as.character(dt$PMID)
A <- Test_ajout_MT(NCTs,MMapt,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",dt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",dt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",dt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(dt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V6 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "Only_Non_unclear",
			wsd_clas = WC,
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

####################################################
#Only non-unclear and mapped trials

R_t <- c()
P_t <- c()
SA_t <- c()

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

tst <- as.character(dt$GBDnp)[CL!=""]
CL <- CL[CL!=""]

algo <- strsplit(CL,"&")
tst <- strsplit(tst,"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

V7 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = "Only_Non_unclear_non_mapped",
			wsd_clas = WC,
			Prec_clas = NA,
			Sp_clas = NA,
			Rec_clas = NA,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)


#####################################################################
#No SVM, Emdin ou JDZ uniquement

#Input: working folders
wk_fd <- c("MetaMapBurden/Emdin_validation/Ajout_OMS/","MachineLearning/Classif_Unclassif/")

for(f in 1:length(wk_fd)){
#OUTPUT METAMAP
TN <- read.table(paste(wk_fd[f],"NoWSD/NCT_total_table.txt",sep=""))
TW <- read.table(paste(wk_fd[f],"WSD/NCT_total_table.txt",sep=""))
TN$meth <- "No"
TW$meth <- "Yes"
MMtp <- rbind(TN,TW)
write.table(MMtp,paste(wk_fd[f],"MMap_tot.txt",sep=""))

#TRIAL_ID et GBDnp
dtp <- read.table(paste(wk_fd[f],"NCT_data.txt",sep=""))
if("Trial"%in%names(dtp)){	dtp$PMID <- dtp$Trial
				dtp$NCT <- dtp$Trial	}
dtp <- dtp[,c("NCT","PMID","brief_title","official_title","condition","GBDnp")]
#duplicated(emdin)
dtp <- droplevels(dtp[!duplicated(dtp$NCT),])
write.table(dtp,paste(wk_fd[f],"NCT_data_tot.txt",sep=""))
}
#Rq: dans les fonctions, il faut reordoner les factors des CUIs dès le début

alpha <- 0.2/100

P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()

for(f in wk_fd){
dt <- read.table(paste(f,"NCT_data_tot.txt",sep=""))
MMapt <- read.table(paste(f,"MMap_tot.txt",sep=""))

NCTs <- as.character(dt$PMID)
A <- Test_ajout_MT(NCTs,MMapt,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",dt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",dt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",dt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(dt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}
}

V8 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = rep(c("Emdin","JDZ"),each=2),
			wsd_clas = rep(WC,2),
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = alpha)

#Avec alpha_min
P_c <- c()
Sp_c <- c()
R_c <- c()
R_t <- c()
P_t <- c()
SA_t <- c()
Al <- c()

f <- wk_fd[1]

dt <- read.table(paste(f,"NCT_data_tot.txt",sep=""))
MMapt <- read.table(paste(f,"MMap_tot.txt",sep=""))

CUI <- unique(MMapt$X5)
MTut <- droplevels(MT[MT$CUIinp%in%CUI,])
gbty <- unlist(tapply(MTut$GBD,MTut$CUIinp,function(x){length(unique(x[!is.na(x)]))}))
nogbd <- names(gbty[gbty==0])
fnogbd <- unlist(lapply(nogbd,function(x){sum(MMapt$X5==x)}))
alpha = max(fnogbd[!nogbd%in%Mtjd$CUIinp])/nrow(MMapt)
alpha = 0.00165

Al <- c(Al,alpha)

NCTs <- as.character(dt$PMID)
A <- Test_ajout_MT(NCTs,MMapt,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",dt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",dt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",dt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(dt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}

f <- wk_fd[2]

dt <- read.table(paste(f,"NCT_data_tot.txt",sep=""))
MMapt <- read.table(paste(f,"MMap_tot.txt",sep=""))

CUI <- unique(MMapt$X5)
MTut <- droplevels(MT[MT$CUIinp%in%CUI,])
gbty <- unlist(tapply(MTut$GBD,MTut$CUIinp,function(x){length(unique(x[!is.na(x)]))}))
nogbd <- names(gbty[gbty==0])
fnogbd <- unlist(lapply(nogbd,function(x){sum(MMapt$X5==x)}))
alpha = max(fnogbd[!nogbd%in%Mtjd$CUIinp])/nrow(MMapt)
alpha = 0.001

Al <- c(Al,alpha)

NCTs <- as.character(dt$PMID)
A <- Test_ajout_MT(NCTs,MMapt,MT,Mtjd,alpha)
MTc <- A[[2]]
WC <- c("Yes","No")

for(wsd_classif in WC){

CL <- classifier_nosvm(dt,MMapt,MTc,wsd_classif)

P_c <- c(P_c,Prec_class(CL!="",dt$GBDnp!=""))
R_c <- c(R_c,Rec_class(CL!="",dt$GBDnp!=""))
Sp_c <- c(Sp_c,Spec_class(CL!="",dt$GBDnp!=""))

algo <- strsplit(CL,"&")
tst <- strsplit(as.character(dt$GBDnp),"&&")
algo0 <- AjoutZ(algo)
tst0 <- AjoutZ(tst)

R_t <- c(R_t,Rec_t(algo0,tst0))
P_t <- c(P_t,Prec_t(algo0,tst0))
SA_t <- c(SA_t,SubsetAcc(algo0,tst0))

}


V9 <- data.frame( 	svm_first = "NoSVM",
			wsd_svm = rep(c("Emdin","JDZ"),each=2),
			wsd_clas = rep(WC,2),
			Prec_clas = P_c,
			Sp_clas = Sp_c,
			Rec_clas = R_c,
			Prec_tr = P_t,
			Rec_tr = R_t,
			SAcc_tr = SA_t,
			alpha = rep(Al,each=2))

#################################################################

VF <- rbind(V,V2,V3,V4,V5,V6,V7,V8,V9)

VF <- VF[order(VF$svm_first,VF$wsd_svm,VF$alpha,VF$wsd_clas),]
VF <- VF[,c(1:2,ncol(VF),3:(ncol(VF)-1))]

write.csv(VF,"MetaMapBurden/Trial_Burden_Param/Validation_table_f.csv")

#####################################################################

#Nb de GBDs

#Manque ajouter V42: only mapped trials
#Et faire avec min alpha

















#####################################################################

table(unlist(lapply(strsplit(as.character(data$GBDnp),"&&"),length)))

table(as.numeric(unlist(strsplit(as.character(data$GBDnp),"&&"))))
Mgbd$cause_name[!1:nrow(Mgbd)%in%unique(as.numeric(unlist(strsplit(as.character(data$GBDnp),"&&"))))]
#GBDs non atteints par Emdin+JDZ

