#Fonction qui renvoit, en fonction d'un input (NCTs,MMap), en fonction de l'output du training, à savoir MTc (IntraMap donné par alpha dans training) et svm_mod: modèle svm, et en fonction de quelques paramètres: wsd_classif: utilise-t-on les données wsd pour la classification (prédiction svm du test set + classification GBD)
#data nécessite avoir PMID connecté à MMap
#et brief_ off_ cond pour Nb_mots
#Rq: wsd_classif = Yes ou No pas de wsd Duo car on va prédire la classif pour un seul
#On ne prédit que pour les essais sans GBD

classifier <- function(data,MMap,MTc,svm_mod,wsd_classif){

NCTs <- as.character(data$PMID)

A <- Test_ajout_MT_classif(MMap,MTc)
if(A[[1]]==FALSE) return(A[[2]])

MC <- CUI_charac(MMap, MTc)

#On fait le processing pour chaque essai pour wsd = wsd_classif
wsd <- wsd_classif
i <- 1
NCT <- paste("pbky",NCTs[i],sep="")
D <- Trial_charac(NCT,MMap,MC,wsd)
for(i in 2:length(NCTs)){
NCT <- paste("pbky",NCTs[i],sep="")
D <- rbind(D,Trial_charac(NCT,MMap,MC,wsd))
}
#30s pour 1500 essais

D <- data.frame(D,row.names=NULL)
D <- cbind(D,Nb_mots_chp(data))

#Pour la prédiction on enlève les NoGBD
d <- droplevels(D[D$Ess_GBD!="",])

#On enlève les GBD group lists
d <- d[,-grep("_GBD$",names(d))]

d <- sapply(d,function(x){as.numeric(as.character(x))})

is_unclear <- predict(svm_mod$best.model,d)

gbd <- as.character(D$Ess_GBD)
gbd[D$Ess_GBD!=""][as.logical(is_unclear)] <- ""

#return(list(is_unclear,gbd))
return(gbd)

}

#########################################################
#Classifier No SVM
####################

classifier_nosvm <- function(data,MMap,MTc,wsd_classif){

NCTs <- as.character(data$PMID)

A <- Test_ajout_MT_classif(MMap,MTc)
if(A[[1]]==FALSE) return(A[[2]])

MC <- CUI_charac(MMap, MTc)

#On fait le processing pour chaque essai pour wsd = wsd_classif
wsd <- wsd_classif
i <- 1
NCT <- paste("pbky",NCTs[i],sep="")
D <- Trial_charac(NCT,MMap,MC,wsd)
for(i in 2:length(NCTs)){
NCT <- paste("pbky",NCTs[i],sep="")
D <- rbind(D,Trial_charac(NCT,MMap,MC,wsd))
}
#30s pour 1500 essais

D <- data.frame(D,row.names=NULL)
D <- cbind(D,Nb_mots_chp(data))

gbd <- as.character(D$Ess_GBD)

return(gbd)

}

