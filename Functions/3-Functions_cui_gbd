########################################################################################
#Fonction prenant UN cui_inp et donnant la liste des gbds par imbrication gbds des cui_out en donnant la même importance aux GBDmult de même taille
###########################################################################################

cuiinp_gbdl <- function(x,MT){

	#Liste des GBDs par CUIout pour x en tant que CUIinp
	
	#On met CUIout=CUIinp pour les is.na(MTCUIout) (venant des NoIntraMap)
	MTp <- MT[MT$CUIinp==x,]
	mtcuiout <- as.character(MTp$CUIout)
	mtcuiout[is.na(MTp$CUIout)] <- as.character(MTp$CUIinp[is.na(MTp$CUIout)])

	#On prend les assignation GBD des CUIout correspondant au CUIinp(on suppr No GBD)
	L <- tapply(as.numeric(as.character(MTp$GBD)),mtcuiout,function(x){unique(x[!is.na(x) & x!=0])})
	#Nb de GBDs par CUIout
	tL <- lapply(L,length)
	#Ensemble de GBDs uniques venant des concepts à GBD unique
	tu <- unique(unlist(L[tL==1]))

	#On les mets dans l'ordre de mas chico a mas grande: asi los q tienen menos tal vez se van a agregar primero, y los mas grandes no.
	#Concepts à GBDmult
	tm <- L[tL>1]

	if(length(tm)>0){
	tM <- lapply(tm,length)
	
	for(k in sort(unique(unlist(tM)))){

	notint <- lapply(tm[tM==k],function(j){length(intersect(j,tu))}==0)

	ins <- Reduce(intersect,tm[tM==k][unlist(notint)])
	if(length(ins)>0) tu <- c(tu,ins)
	else tu <- unique(c(tu,unlist(tm[tM==k][unlist(notint)])))

	}

	}

	return(tu)
}

##################################################################################
#Fonction prenant une liste de CUI_inp et donnant la liste des gbds par imbrication gbds des cui_inp
###################################################################################################
cuiinp_gbd <- function(lista,MT){
	L <- lapply(lista,function(x){cuiinp_gbdl(x,MT)})
	tL <- unlist(lapply(L,length))
	#Ensemble de GBDs uniques venant des concepts à GBD unique
	tu <- unique(unlist(L[tL==1]))

	#On les mets dans l'ordre de mas chico a mas grande: asi los q tienen menos tal vez se van a agregar primero, y los mas grandes no.
	#Concepts à GBDmult
	tm <- L[tL>1]

	if(length(tm)>0){
	tM <- lapply(tm,length)
	
	for(k in sort(unique(unlist(tM)))){

	notint <- lapply(tm[tM==k],function(j){length(intersect(j,tu))}==0)

	ins <- Reduce(intersect,tm[tM==k][unlist(notint)])
	if(length(ins)>0) tu <- c(tu,ins)
	else tu <- unique(c(tu,unlist(tm[tM==k][unlist(notint)])))

	}

	}

	return(tu)
}

#########################################
#Fonction scoring
#if cond = FALSE (default value), donne priorité aux plus petits (peu importe si c'est brieftitle ou condition...)
#if cond = TRUE, donne priorité au gbd de condition
#Rq: champ condition est le deuxième élément de la liste
#Rq: dans scoring gbd, input est une liste de liste de charactères
##########################################
scoring_gbd <- function(LL,cond=FALSE){
	
	L <- lapply(LL,function(x){as.numeric(as.character(x))})
	tL <- unlist(lapply(L,length))

	#Si cond = TRUE et si il existe GBD dans condition
	if(cond==TRUE & tL[2]>=1){
	#On donne priorité au champ condition
	tu <- unlist(L[2])
	#if gbd multiple et intersect avec un des autres champs, on donne l'intersection
	if(tL[2]>1 & length(intersect(tu,unlist(L[-2])))>0) tu <- unique(intersect(tu,unlist(L[-2]))) 
	#sinon on donne gbd condition (unique ou mult)
	}

	else{
	#Concepts à GBDmult
	tm <- L[tL>1]
	#Ensemble de GBDs uniques venant des concepts à GBD unique
	tu <- unique(unlist(L[tL==1]))
	
	#On les mets dans l'ordre de mas chico a mas grande: asi los q tienen menos tal vez se van a agregar primero, y los mas grandes no.
	if(length(tm)>0){
	tM <- lapply(tm,length)
	
	for(k in sort(unique(unlist(tM)))){

	notint <- lapply(tm[tM==k],function(j){length(intersect(j,tu))}==0)

	ins <- Reduce(intersect,tm[tM==k][unlist(notint)])
	if(length(ins)>0) tu <- c(tu,ins)
	else tu <- unique(c(tu,unlist(tm[tM==k][unlist(notint)])))

	}

	}
	}#end else cond = TRUE
	return(tu)
}

