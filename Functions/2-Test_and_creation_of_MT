#This function tests, depending on the MetaMap output (MMap), 
#on the IntraMap data in memory (already uploaded)
#if it is necessary to rerun IntraMap
#If there is no need to rerun IntraMap, the output is the total matrix UMLS_GBD
#Output depends on eb=TRUE if expert-based enrichment database to be considered
#		   eb=FALSE if expert-based enrichment database not to be considered

#Output = FALSE if needs IntraMap
#	  + NULL
#	  + list of concepts to be mapped
#	= TRUE if no need
#	  + MTc: total table UMLS_GBD
#	  + NULL

#Needs library(gdata)

Test_add_MT <- function(MMap,MT,eb,MTEB){

	#MMap: output MetaMap
	#MT: data UMLS+IntraMap in memory
	#eb: using expert-based enrichment?
	#MTEB: expert-based enrichment database

	CUI <- unique(MMap$X5)

	#All CUI output from Intramap are in UMLS_ICD10 or already mapped with IntraMap?
	#If not: Error and list CUIs for IntraMap
	if(sum(!CUI%in%MT$CUIinp)!=0) {
		print(paste(c("Error: Need running IntraMap for ",sum(!CUI%in%MT$CUIinp)," concepts"),collapse=""))
		return(list(FALSE,NULL,CUI[!CUI%in%MT$CUIinp]))
		}

	#Restriction of UMLS and IntraMap to CUIs output MetaMap
	MTut <- droplevels(MT[MT$CUIinp%in%CUI,])

	#Expert-based enrichment:
	if(eb==TRUE){
	#If using expert-based enrichment: choosing among MTEB database, CUIs without GBD in MTut
	gbty <- unlist(tapply(MTut$GBD,MTut$CUIinp,function(x){length(unique(x[!is.na(x)]))}))
	nogbd <- names(gbty[gbty==0])
	MTEBut <- droplevels(MTEB[MTEB$CUIinp%in%nogbd,])
	#CREATION DE MTc
	MTc <- data.frame(rbind(as.matrix(MTut),as.matrix(MTEBut)))
	MTc$CUIinp <- reorder(MTc$CUIinp,new.order=sort(levels(MTc$CUIinp)))
	}

	else{ MTc <- MTut
	MTc$CUIinp <- reorder(MTc$CUIinp,new.order=sort(levels(MTc$CUIinp)))
	}

	return(list(TRUE,MTc,NULL))

}

